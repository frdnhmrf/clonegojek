{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["MaterialCommunityIcons","require","default","e","isErrorLogged","name","color","size","selectionColor","_0","onLayout","_1","rest","test","message","console","error","warn","styles","icon","fontSize","MaterialBottomTabViewInner","state","navigation","descriptors","insets","dark","colors","buildLink","theme","React","useMemo","t","DarkTheme","DefaultTheme","surface","card","index","dispatch","TabActions","jumpTo","routes","target","key","route","render","Platform","OS","onPress","accessibilityRole","borderless","centered","_2","rippleColor","_3","style","params","metaKey","altKey","ctrlKey","shiftKey","button","preventDefault","touchable","undefined","focused","options","tabBarIcon","tabBarLabel","title","tabBarColor","tabBarBadge","tabBarAccessibilityLabel","tabBarTestID","event","emit","type","canPreventDefault","defaultPrevented","MaterialBottomTabView","props","StyleSheet","create","backgroundColor","display","justifyContent"],"mappings":"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","sourcesContent":["import { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport {\n  Link,\n  ParamListBase,\n  Route,\n  TabActions,\n  TabNavigationState,\n  useLinkBuilder,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet, Text } from 'react-native';\nimport { BottomNavigation, DarkTheme, DefaultTheme } from 'react-native-paper';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\n// Optionally require vector-icons referenced from react-native-paper:\n// https://github.com/callstack/react-native-paper/blob/4b26429c49053eaa4c3e0fae208639e01093fa87/src/components/MaterialCommunityIcon.tsx#L14\nlet MaterialCommunityIcons: React.ComponentType<\n  React.ComponentProps<\n    typeof import('react-native-vector-icons/MaterialCommunityIcons').default\n  >\n>;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons =\n    require('react-native-vector-icons/MaterialCommunityIcons').default;\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  MaterialCommunityIcons = ({\n    name,\n    color,\n    size,\n    selectionColor: _0,\n    onLayout: _1,\n    ...rest\n  }) => {\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from '@react-navigation/material-bottom-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://reactnavigation.org/docs/material-bottom-tab-navigator/#tabbaricon.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Text {...rest} style={[styles.icon, { color, fontSize: size }]}>\n        â–¡\n      </Text>\n    );\n  };\n}\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const insets = useSafeAreaInsets();\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      safeAreaInsets={insets}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <MaterialBottomTabViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]}