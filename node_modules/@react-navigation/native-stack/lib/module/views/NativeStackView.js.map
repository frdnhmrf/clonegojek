{"version":3,"sources":["NativeStackView.tsx"],"names":["SafeAreaProviderCompat","StackActions","useTheme","React","Platform","StyleSheet","Screen","ScreenStack","warnOnce","DebugContainer","HeaderConfig","isAndroid","OS","MaybeNestedStack","options","route","presentation","children","colors","headerShown","contentStyle","isHeaderInModal","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","absoluteFill","NativeStackViewInner","state","navigation","descriptors","routes","map","index","render","renderScene","key","gestureEnabled","animationTypeForReplace","animation","orientation","statusBarAnimation","statusBarHidden","statusBarStyle","isHeaderInPush","emit","type","data","closing","target","dispatch","pop","source","NativeStackView","props","create","flex"],"mappings":"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","sourcesContent":["import { SafeAreaProviderCompat } from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport {\n  Screen,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport warnOnce from 'warn-once';\n\nimport type {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport DebugContainer from './DebugContainer';\nimport HeaderConfig from './HeaderConfig';\n\nconst isAndroid = Platform.OS === 'android';\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <DebugContainer\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </DebugContainer>\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderConfig {...options} route={route} />\n          {content}\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const { options, render: renderScene } = descriptors[route.key];\n        const {\n          gestureEnabled,\n          headerShown,\n          animationTypeForReplace = 'pop',\n          animation,\n          orientation,\n          statusBarAnimation,\n          statusBarHidden,\n          statusBarStyle,\n        } = options;\n\n        let { presentation = 'card' } = options;\n\n        if (index === 0) {\n          // first screen should always be treated as `card`, it resolves problems with no header animation\n          // for navigator with first screen as `modal` and the next as `card`\n          presentation = 'card';\n        }\n\n        const isHeaderInPush = isAndroid\n          ? headerShown\n          : presentation === 'card' && headerShown !== false;\n\n        return (\n          <Screen\n            key={route.key}\n            enabled\n            style={StyleSheet.absoluteFill}\n            gestureEnabled={\n              isAndroid\n                ? // This prop enables handling of system back gestures on Android\n                  // Since we handle them in JS side, we disable this\n                  false\n                : gestureEnabled\n            }\n            replaceAnimation={animationTypeForReplace}\n            stackPresentation={presentation === 'card' ? 'push' : presentation}\n            stackAnimation={animation}\n            screenOrientation={orientation}\n            statusBarAnimation={statusBarAnimation}\n            statusBarHidden={statusBarHidden}\n            statusBarStyle={statusBarStyle}\n            onWillAppear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n            }}\n          >\n            <HeaderConfig\n              {...options}\n              route={route}\n              headerShown={isHeaderInPush}\n            />\n            <MaybeNestedStack\n              options={options}\n              route={route}\n              presentation={presentation}\n            >\n              {renderScene()}\n            </MaybeNestedStack>\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}