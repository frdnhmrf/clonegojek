function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { SafeAreaProviderCompat } from '@react-navigation/elements';
import { StackActions, useTheme } from '@react-navigation/native';
import * as React from 'react';
import { Platform, StyleSheet } from 'react-native';
import { Screen, ScreenStack } from 'react-native-screens';
import warnOnce from 'warn-once';
import DebugContainer from './DebugContainer';
import HeaderConfig from './HeaderConfig';
const isAndroid = Platform.OS === 'android';

const MaybeNestedStack = ({
  options,
  route,
  presentation,
  children
}) => {
  const {
    colors
  } = useTheme();
  const {
    headerShown = true,
    contentStyle
  } = options;
  const isHeaderInModal = isAndroid ? false : presentation !== 'card' && headerShown === true;
  const headerShownPreviousRef = React.useRef(headerShown);
  React.useEffect(() => {
    warnOnce(!isAndroid && presentation !== 'card' && headerShownPreviousRef.current !== headerShown, `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`);
    headerShownPreviousRef.current = headerShown;
  }, [headerShown, presentation, route.name]);
  const content = /*#__PURE__*/React.createElement(DebugContainer, {
    style: [styles.container, presentation !== 'transparentModal' && presentation !== 'containedTransparentModal' && {
      backgroundColor: colors.background
    }, contentStyle],
    stackPresentation: presentation === 'card' ? 'push' : presentation
  }, children);

  if (isHeaderInModal) {
    return /*#__PURE__*/React.createElement(ScreenStack, {
      style: styles.container
    }, /*#__PURE__*/React.createElement(Screen, {
      enabled: true,
      style: StyleSheet.absoluteFill
    }, /*#__PURE__*/React.createElement(HeaderConfig, _extends({}, options, {
      route: route
    })), content));
  }

  return content;
};

function NativeStackViewInner({
  state,
  navigation,
  descriptors
}) {
  return /*#__PURE__*/React.createElement(ScreenStack, {
    style: styles.container
  }, state.routes.map((route, index) => {
    const {
      options,
      render: renderScene
    } = descriptors[route.key];
    const {
      gestureEnabled,
      headerShown,
      animationTypeForReplace = 'pop',
      animation,
      orientation,
      statusBarAnimation,
      statusBarHidden,
      statusBarStyle
    } = options;
    let {
      presentation = 'card'
    } = options;

    if (index === 0) {
      // first screen should always be treated as `card`, it resolves problems with no header animation
      // for navigator with first screen as `modal` and the next as `card`
      presentation = 'card';
    }

    const isHeaderInPush = isAndroid ? headerShown : presentation === 'card' && headerShown !== false;
    return /*#__PURE__*/React.createElement(Screen, {
      key: route.key,
      enabled: true,
      style: StyleSheet.absoluteFill,
      gestureEnabled: isAndroid ? // This prop enables handling of system back gestures on Android
      // Since we handle them in JS side, we disable this
      false : gestureEnabled,
      replaceAnimation: animationTypeForReplace,
      stackPresentation: presentation === 'card' ? 'push' : presentation,
      stackAnimation: animation,
      screenOrientation: orientation,
      statusBarAnimation: statusBarAnimation,
      statusBarHidden: statusBarHidden,
      statusBarStyle: statusBarStyle,
      onWillAppear: () => {
        navigation.emit({
          type: 'transitionStart',
          data: {
            closing: false
          },
          target: route.key
        });
      },
      onWillDisappear: () => {
        navigation.emit({
          type: 'transitionStart',
          data: {
            closing: true
          },
          target: route.key
        });
      },
      onAppear: () => {
        navigation.emit({
          type: 'transitionEnd',
          data: {
            closing: false
          },
          target: route.key
        });
      },
      onDisappear: () => {
        navigation.emit({
          type: 'transitionEnd',
          data: {
            closing: true
          },
          target: route.key
        });
      },
      onDismissed: () => {
        navigation.dispatch({ ...StackActions.pop(),
          source: route.key,
          target: state.key
        });
      }
    }, /*#__PURE__*/React.createElement(HeaderConfig, _extends({}, options, {
      route: route,
      headerShown: isHeaderInPush
    })), /*#__PURE__*/React.createElement(MaybeNestedStack, {
      options: options,
      route: route,
      presentation: presentation
    }, renderScene()));
  }));
}

export default function NativeStackView(props) {
  return /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(NativeStackViewInner, props));
}
const styles = StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=NativeStackView.js.map